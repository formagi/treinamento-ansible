- name: check environment
  assert:
    that:
      - instance_type is defined
      - sec_group_name is defined
      - keypair is defined
      - profile is defined
    msg: "Erro na definição de variáveis"

- name: Criando o Sec Group
  local_action:
    module: ec2_group
    name: "{{ sec_group_name }}"
    description: sg_trubiscoso
    profile: "{{ profile }}"
    region: "{{ region }}"
    rules:
    - proto: tcp
      from_port: 22
      to_port: 22
      cidr_ip: 0.0.0.0/0
      rule_desc: SSH
    - proto: tcp
      from_port: 2379
      to_port: 2380
      cidr_ip: 0.0.0.0/0
      rule_desc: etcd server API
    - proto: tcp
      from_port: 6443
      to_port: 6443
      cidr_ip: 0.0.0.0/0
      rule_desc: kube-apiserver
    - proto: tcp
      from_port: 10250
      to_port: 10250
      cidr_ip: 0.0.0.0/0
      rule_desc: Kubelet API
    - proto: tcp
      from_port: 10251
      to_port: 10251
      cidr_ip: 0.0.0.0/0
      rule_desc: kube-scheduler
    - proto: tcp
      from_port: 10252
      to_port: 10252
      cidr_ip: 0.0.0.0/0
      rule_desc: kube-controller-manager
    - proto: tcp
      from_port: 10255
      to_port: 10255
      cidr_ip: 0.0.0.0/0
      rule_desc: Kubelet API Read-only
    - proto: tcp
      from_port: 30000
      to_port: 32767
      cidr_ip: 0.0.0.0/0
      rule_desc: NodePort Services
    - proto: tcp
      from_port: 6783
      to_port: 6783
      cidr_ip: 0.0.0.0/0
      rule_desc: WeaveNet
    - proto: udp
      from_port: 6783
      to_port: 6783
      cidr_ip: 0.0.0.0/0
      rule_desc: Weavenet
    - proto: udp
      from_port: 6784
      to_port: 6784
      cidr_ip: 0.0.0.0/0
      rule_desc: Weavenet
    - proto: tcp
      from_port: 32222
      to_port: 32222
      cidr_ip: 0.0.0.0/0
      rule_desc: deploy app
    - proto: tcp
      from_port: 32111
      to_port: 32111
      cidr_ip: 0.0.0.0/0
      rule_desc: app prometheus
    rules_egress:
    - proto: all
      cidr_ip: 0.0.0.0/0
  register: basic_firewall

- name: Criando instancia EC2
  local_action:
    module: ec2
    group: "{{ sec_group_name }}"
    instance_type: "{{ instance_type }}"
    image: "{{ image }}"
    profile: "{{ profile }}"
    wait: true
    region: "{{ region }}"
    keypair: "{{ keypair }}"
    count: "{{ count }}"
  register: ec2

- name: adicionando k8s-master ao inventario
  local_action: 
    module: lineinfile
    dest: "hosts"
    line: "ansible-{{ item.ami_launch_index|int + 1 }} ansible_host={{ item.public_ip }} private_ip={{ item.private_ip }}"
    insertafter: \[k8s_master\]
  with_items: "{{ ec2.instances }}"
  when: item['ami_launch_index'] == '0'

- name: adicionando k8s-workers ao inventario
  local_action: 
    module: lineinfile
    dest: "hosts"
    line: "ansible-{{ item.ami_launch_index|int + 1 }} ansible_host={{ item.public_ip }} private_ip={{ item.private_ip }}"
    insertafter: \[k8s_workers\]
  with_items: "{{ ec2.instances }}"
  when: item['ami_launch_index'] != '0'

- name: adicionando private_ip nos vars do grupo workers
  local_action: 
    module: lineinfile
    dest: "hosts"
    line: "K8S_MASTER_NODE_IP={{ item.private_ip }}"
    regexp: K8S_MASTER_NODE_IP
  with_items: "{{ ec2.instances }}"
  when: item['ami_launch_index'] == '0'

- name: Esperando o SSH
  local_action: 
    module: wait_for
    host: "{{ item.public_ip }}"
    port: 22
    state: started
  with_items: "{{ ec2.instances }}"

- name: Adicionando uma tag na instancia
  local_action: 
    module: ec2_tag
    resource: "{{ item.id }}"
    region: "{{ region }}"
    profile: "{{ profile }}"
    state: present
  with_items: "{{ ec2.instances }}"
  args:
    tags:
      Name: "ansible-{{ item.ami_launch_index|int + 1 }}"
